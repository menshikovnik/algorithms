package Solve.graphics;

import Solve.graphics.additional.ManipulateModes;
import Solve.graphics.additional.ObjectModes;
import Solve.logic.Logic;
import Solve.logic.graph.AdjMatrixGraph;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.util.List;

public class MainFrame extends JFrame {
    private JPanel mainPanel;
    private JPanel graphPanel;

    private JCheckBox vertexModeCheckBox;
    private JCheckBox edgeModeCheckBox;
    private JCheckBox addModeCheckBox;
    private JCheckBox delModeCheckBox;

    private JTextField depthField;
    private JTextField answerField;

    private JButton getVerticesButton;
    private JButton clearButton;

    private JLabel answerLabel;
    private JTextField verticesAvailability;

    private final Canvas canvas = new Canvas();

    public MainFrame() {
        super();

        configureFrame();
        graphPanel.add(canvas, BorderLayout.CENTER);
        createButtonListeners();

        pack();
        setVisible(true);
    }

    private void configureFrame() {
        setContentPane(mainPanel);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setMinimumSize(new Dimension(1500, 800));
        setResizable(false);
    }

    private void createButtonListeners() {
        edgeModeCheckBox.addActionListener(o -> {
            vertexModeCheckBox.setSelected(false);
            canvas.changeObjectMode(ObjectModes.EDGE);
        });

        vertexModeCheckBox.addActionListener(o -> {
            edgeModeCheckBox.setSelected(false);
            canvas.changeObjectMode(ObjectModes.VERTEX);
        });


        addModeCheckBox.addActionListener(o -> {
            delModeCheckBox.setSelected(false);
            canvas.changeManipulateMode(ManipulateModes.ADD);
        });

        delModeCheckBox.addActionListener(o -> {
            addModeCheckBox.setSelected(false);
            canvas.changeManipulateMode(ManipulateModes.DELETE);
        });

        getVerticesButton.addActionListener(o -> {
            int N = Integer.parseInt(depthField.getText());
            int startVertex = Integer.parseInt(verticesAvailability.getText());
            AdjMatrixGraph graph = canvas.getGraph();
            if (N <= 0) {
                answerField.setText("N задано неверно!");
            } else if (!Logic.isGraphConnected(graph, graph.vertexCount())) {
                answerField.setText("Граф не связный!");
            } else if (Logic.isGraphConnected(graph, graph.vertexCount())) {
                List<Integer> answer = Logic.findVertices(graph, N, startVertex);
                if (answer.size() == 0) {
                    answerField.setText("Граф удовлетворяет теории об N рукопожатий");
                } else {
                    answerField.setText(String.valueOf(answer));
                }
            }
        });

        clearButton.addActionListener(o -> canvas.clearAll());
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(4, 2, new Insets(0, 0, 0, 0), -1, -1));
        graphPanel = new JPanel();
        graphPanel.setLayout(new BorderLayout(0, 0));
        graphPanel.setEnabled(false);
        mainPanel.add(graphPanel, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        graphPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, true));
        vertexModeCheckBox = new JCheckBox();
        vertexModeCheckBox.setSelected(true);
        vertexModeCheckBox.setText("Режим вершин");
        panel1.add(vertexModeCheckBox, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        edgeModeCheckBox = new JCheckBox();
        edgeModeCheckBox.setText("Режим ребер");
        panel1.add(edgeModeCheckBox, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        addModeCheckBox = new JCheckBox();
        addModeCheckBox.setHideActionText(false);
        addModeCheckBox.setSelected(true);
        addModeCheckBox.setText("Режим добавления");
        panel1.add(addModeCheckBox, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        delModeCheckBox = new JCheckBox();
        delModeCheckBox.setText("Режим удаления");
        panel1.add(delModeCheckBox, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel2, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, true));
        answerField = new JTextField();
        answerField.setEditable(false);
        panel2.add(answerField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        answerLabel = new JLabel();
        answerLabel.setText("Ответ");
        panel2.add(answerLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel3, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, true));
        depthField = new JTextField();
        depthField.setText("0");
        panel3.add(depthField, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        clearButton = new JButton();
        clearButton.setText("Очистить граф");
        panel3.add(clearButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        verticesAvailability = new JTextField();
        verticesAvailability.setText("0");
        panel3.add(verticesAvailability, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Введите N");
        panel3.add(label1, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Укажите для какой вершины");
        panel3.add(label2, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        getVerticesButton = new JButton();
        getVerticesButton.setText("Вычислить узлы");
        mainPanel.add(getVerticesButton, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }


}
